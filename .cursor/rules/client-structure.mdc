---
description: 
globs: 
alwaysApply: false
---
# Client-Side Application Structure (`client/`)

The `client/` directory contains the frontend application code, likely built with React and Vite.

## Key Subdirectories:

*   **[src/](mdc:client/src)**: This is the main source code directory for the client application.
    *   **[components/](mdc:client/src/components)**: Contains reusable UI components. It seems to have subdirectories for `magicui/`, `ui/`, and `video-translation/` components.
        *   **[magicui/](mdc:client/src/components/magicui)**: Likely contains specialized UI components, possibly from an external library or a custom set of advanced components.
        *   **[ui/](mdc:client/src/components/ui)**: General-purpose UI components.
        *   **[video-translation/](mdc:client/src/components/video-translation)**: Components specific to video translation features.
    *   **[contexts/](mdc:client/src/contexts)**: Holds React Context API providers and consumers for state management.
    *   **[data/](mdc:client/src/data)**: May contain static data, mock data, or data-fetching related modules.
    *   **[hooks/](mdc:client/src/hooks)**: Custom React hooks for reusable logic.
    *   **[lib/](mdc:client/src/lib)**: Utility functions, helper modules, or client-side libraries.
    *   **[pages/](mdc:client/src/pages)**: Represents different pages or views of the application, likely used with a routing library.
    *   **[types/](mdc:client/src/types)**: TypeScript type definitions specific to the client-side application.

## Build and Configuration:

*   The client application is likely built using Vite, configured in [vite.config.ts](mdc:vite.config.ts).
*   Styling is managed with Tailwind CSS, configured in [tailwind.config.ts](mdc:tailwind.config.ts).
*   Root HTML file is probably `client/index.html` (not listed but typical for Vite).
